// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/hsm.proto

#include "caffe2/proto/hsm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_caffe2_2fproto_2fhsm_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_caffe2_2fproto_2fhsm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_caffe2_2fproto_2fhsm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathNodeProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_caffe2_2fproto_2fhsm_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PathProto;
}  // namespace protobuf_caffe2_2fproto_2fhsm_2eproto
namespace caffe2 {
class NodeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeProto>
      _instance;
} _NodeProto_default_instance_;
class TreeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeProto>
      _instance;
} _TreeProto_default_instance_;
class HierarchyProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HierarchyProto>
      _instance;
} _HierarchyProto_default_instance_;
class PathProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathProto>
      _instance;
} _PathProto_default_instance_;
class PathNodeProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathNodeProto>
      _instance;
} _PathNodeProto_default_instance_;
}  // namespace caffe2
namespace protobuf_caffe2_2fproto_2fhsm_2eproto {
static void InitDefaultsNodeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_NodeProto_default_instance_;
    new (ptr) ::caffe2::NodeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::NodeProto::InitAsDefaultInstance();
}

CAFFE2_API ::google::protobuf::internal::SCCInfo<0> scc_info_NodeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeProto}, {}};

static void InitDefaultsTreeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_TreeProto_default_instance_;
    new (ptr) ::caffe2::TreeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::TreeProto::InitAsDefaultInstance();
}

CAFFE2_API ::google::protobuf::internal::SCCInfo<1> scc_info_TreeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTreeProto}, {
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_NodeProto.base,}};

static void InitDefaultsHierarchyProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_HierarchyProto_default_instance_;
    new (ptr) ::caffe2::HierarchyProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::HierarchyProto::InitAsDefaultInstance();
}

CAFFE2_API ::google::protobuf::internal::SCCInfo<1> scc_info_HierarchyProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHierarchyProto}, {
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_PathProto.base,}};

static void InitDefaultsPathProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_PathProto_default_instance_;
    new (ptr) ::caffe2::PathProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::PathProto::InitAsDefaultInstance();
}

CAFFE2_API ::google::protobuf::internal::SCCInfo<1> scc_info_PathProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPathProto}, {
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_PathNodeProto.base,}};

static void InitDefaultsPathNodeProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_PathNodeProto_default_instance_;
    new (ptr) ::caffe2::PathNodeProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::PathNodeProto::InitAsDefaultInstance();
}

CAFFE2_API ::google::protobuf::internal::SCCInfo<0> scc_info_PathNodeProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathNodeProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NodeProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TreeProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HierarchyProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathNodeProto.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, word_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::NodeProto, scores_),
  ~0u,
  ~0u,
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::TreeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::TreeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::TreeProto, root_node_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::HierarchyProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::HierarchyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::HierarchyProto, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::HierarchyProto, paths_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathProto, word_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathProto, path_nodes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathNodeProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathNodeProto, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathNodeProto, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::PathNodeProto, target_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::caffe2::NodeProto)},
  { 15, 21, sizeof(::caffe2::TreeProto)},
  { 22, 29, sizeof(::caffe2::HierarchyProto)},
  { 31, 38, sizeof(::caffe2::PathProto)},
  { 40, 48, sizeof(::caffe2::PathNodeProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_NodeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_TreeProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_HierarchyProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_PathProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_PathNodeProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "caffe2/proto/hsm.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026caffe2/proto/hsm.proto\022\006caffe2\"p\n\tNode"
      "Proto\022#\n\010children\030\001 \003(\0132\021.caffe2.NodePro"
      "to\022\020\n\010word_ids\030\002 \003(\005\022\016\n\006offset\030\003 \001(\005\022\014\n\004"
      "name\030\004 \001(\t\022\016\n\006scores\030\005 \003(\002\"1\n\tTreeProto\022"
      "$\n\troot_node\030\001 \001(\0132\021.caffe2.NodeProto\"@\n"
      "\016HierarchyProto\022\014\n\004size\030\001 \001(\005\022 \n\005paths\030\002"
      " \003(\0132\021.caffe2.PathProto\"G\n\tPathProto\022\017\n\007"
      "word_id\030\001 \001(\005\022)\n\npath_nodes\030\002 \003(\0132\025.caff"
      "e2.PathNodeProto\">\n\rPathNodeProto\022\r\n\005ind"
      "ex\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022\016\n\006target\030\003 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2/proto/hsm.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_caffe2_2fproto_2fhsm_2eproto
namespace caffe2 {

// ===================================================================

void NodeProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeProto::kChildrenFieldNumber;
const int NodeProto::kWordIdsFieldNumber;
const int NodeProto::kOffsetFieldNumber;
const int NodeProto::kNameFieldNumber;
const int NodeProto::kScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeProto::NodeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_NodeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.NodeProto)
}
NodeProto::NodeProto(const NodeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      children_(from.children_),
      word_ids_(from.word_ids_),
      scores_(from.scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:caffe2.NodeProto)
}

void NodeProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0;
}

NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:caffe2.NodeProto)
  SharedDtor();
}

void NodeProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeProto::descriptor() {
  ::protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeProto& NodeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_NodeProto.base);
  return *internal_default_instance();
}


void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.NodeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  word_ids_.Clear();
  scores_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  offset_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.NodeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.NodeProto children = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 word_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_word_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NodeProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scores = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_scores())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.NodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.NodeProto)
  return false;
#undef DO_
}

void NodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.NodeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.NodeProto children = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->children(static_cast<int>(i)),
      output);
  }

  // repeated int32 word_ids = 2;
  for (int i = 0, n = this->word_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->word_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NodeProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated float scores = 5;
  for (int i = 0, n = this->scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->scores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.NodeProto)
}

::google::protobuf::uint8* NodeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.NodeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.NodeProto children = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->children(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 word_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->word_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NodeProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated float scores = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->scores_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.NodeProto)
  return target;
}

size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.NodeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.NodeProto children = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // repeated int32 word_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->word_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->word_ids_size());
    total_size += data_size;
  }

  // repeated float scores = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->scores_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scores_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.NodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.NodeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.NodeProto)
    MergeFrom(*source);
  }
}

void NodeProto::MergeFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.NodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  word_ids_.MergeFrom(from.word_ids_);
  scores_.MergeFrom(from.scores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeProto::IsInitialized() const {
  return true;
}

void NodeProto::Swap(NodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeProto::InternalSwap(NodeProto* other) {
  using std::swap;
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  word_ids_.InternalSwap(&other->word_ids_);
  scores_.InternalSwap(&other->scores_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(offset_, other->offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeProto::GetMetadata() const {
  protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TreeProto::InitAsDefaultInstance() {
  ::caffe2::_TreeProto_default_instance_._instance.get_mutable()->root_node_ = const_cast< ::caffe2::NodeProto*>(
      ::caffe2::NodeProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeProto::kRootNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeProto::TreeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_TreeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TreeProto)
}
TreeProto::TreeProto(const TreeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root_node()) {
    root_node_ = new ::caffe2::NodeProto(*from.root_node_);
  } else {
    root_node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.TreeProto)
}

void TreeProto::SharedCtor() {
  root_node_ = NULL;
}

TreeProto::~TreeProto() {
  // @@protoc_insertion_point(destructor:caffe2.TreeProto)
  SharedDtor();
}

void TreeProto::SharedDtor() {
  if (this != internal_default_instance()) delete root_node_;
}

void TreeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TreeProto::descriptor() {
  ::protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeProto& TreeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_TreeProto.base);
  return *internal_default_instance();
}


void TreeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TreeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_node_ != NULL);
    root_node_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TreeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TreeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe2.NodeProto root_node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TreeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TreeProto)
  return false;
#undef DO_
}

void TreeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TreeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.NodeProto root_node = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_root_node(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TreeProto)
}

::google::protobuf::uint8* TreeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TreeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .caffe2.NodeProto root_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_root_node(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TreeProto)
  return target;
}

size_t TreeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TreeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .caffe2.NodeProto root_node = 1;
  if (has_root_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *root_node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TreeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TreeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TreeProto)
    MergeFrom(*source);
  }
}

void TreeProto::MergeFrom(const TreeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TreeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root_node()) {
    mutable_root_node()->::caffe2::NodeProto::MergeFrom(from.root_node());
  }
}

void TreeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TreeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeProto::CopyFrom(const TreeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TreeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeProto::IsInitialized() const {
  return true;
}

void TreeProto::Swap(TreeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeProto::InternalSwap(TreeProto* other) {
  using std::swap;
  swap(root_node_, other->root_node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TreeProto::GetMetadata() const {
  protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HierarchyProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HierarchyProto::kSizeFieldNumber;
const int HierarchyProto::kPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HierarchyProto::HierarchyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_HierarchyProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.HierarchyProto)
}
HierarchyProto::HierarchyProto(const HierarchyProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:caffe2.HierarchyProto)
}

void HierarchyProto::SharedCtor() {
  size_ = 0;
}

HierarchyProto::~HierarchyProto() {
  // @@protoc_insertion_point(destructor:caffe2.HierarchyProto)
  SharedDtor();
}

void HierarchyProto::SharedDtor() {
}

void HierarchyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HierarchyProto::descriptor() {
  ::protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HierarchyProto& HierarchyProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_HierarchyProto.base);
  return *internal_default_instance();
}


void HierarchyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.HierarchyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HierarchyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.HierarchyProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.PathProto paths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.HierarchyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.HierarchyProto)
  return false;
#undef DO_
}

void HierarchyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.HierarchyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated .caffe2.PathProto paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->paths(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.HierarchyProto)
}

::google::protobuf::uint8* HierarchyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.HierarchyProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated .caffe2.PathProto paths = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paths_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->paths(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.HierarchyProto)
  return target;
}

size_t HierarchyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.HierarchyProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.PathProto paths = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paths(static_cast<int>(i)));
    }
  }

  // optional int32 size = 1;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HierarchyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.HierarchyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const HierarchyProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HierarchyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.HierarchyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.HierarchyProto)
    MergeFrom(*source);
  }
}

void HierarchyProto::MergeFrom(const HierarchyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.HierarchyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.has_size()) {
    set_size(from.size());
  }
}

void HierarchyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.HierarchyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchyProto::CopyFrom(const HierarchyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.HierarchyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchyProto::IsInitialized() const {
  return true;
}

void HierarchyProto::Swap(HierarchyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HierarchyProto::InternalSwap(HierarchyProto* other) {
  using std::swap;
  CastToBase(&paths_)->InternalSwap(CastToBase(&other->paths_));
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HierarchyProto::GetMetadata() const {
  protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathProto::kWordIdFieldNumber;
const int PathProto::kPathNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathProto::PathProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_PathProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PathProto)
}
PathProto::PathProto(const PathProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      path_nodes_(from.path_nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_id_ = from.word_id_;
  // @@protoc_insertion_point(copy_constructor:caffe2.PathProto)
}

void PathProto::SharedCtor() {
  word_id_ = 0;
}

PathProto::~PathProto() {
  // @@protoc_insertion_point(destructor:caffe2.PathProto)
  SharedDtor();
}

void PathProto::SharedDtor() {
}

void PathProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathProto::descriptor() {
  ::protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathProto& PathProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_PathProto.base);
  return *internal_default_instance();
}


void PathProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PathProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_nodes_.Clear();
  word_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PathProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 word_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.PathNodeProto path_nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PathProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PathProto)
  return false;
#undef DO_
}

void PathProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PathProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 word_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->word_id(), output);
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->path_nodes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PathProto)
}

::google::protobuf::uint8* PathProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PathProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 word_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->word_id(), target);
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->path_nodes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PathProto)
  return target;
}

size_t PathProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PathProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.PathNodeProto path_nodes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->path_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_nodes(static_cast<int>(i)));
    }
  }

  // optional int32 word_id = 1;
  if (has_word_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PathProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PathProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PathProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PathProto)
    MergeFrom(*source);
  }
}

void PathProto::MergeFrom(const PathProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PathProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_nodes_.MergeFrom(from.path_nodes_);
  if (from.has_word_id()) {
    set_word_id(from.word_id());
  }
}

void PathProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PathProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathProto::CopyFrom(const PathProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PathProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathProto::IsInitialized() const {
  return true;
}

void PathProto::Swap(PathProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathProto::InternalSwap(PathProto* other) {
  using std::swap;
  CastToBase(&path_nodes_)->InternalSwap(CastToBase(&other->path_nodes_));
  swap(word_id_, other->word_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathProto::GetMetadata() const {
  protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathNodeProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathNodeProto::kIndexFieldNumber;
const int PathNodeProto::kLengthFieldNumber;
const int PathNodeProto::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathNodeProto::PathNodeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_PathNodeProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PathNodeProto)
}
PathNodeProto::PathNodeProto(const PathNodeProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&index_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:caffe2.PathNodeProto)
}

void PathNodeProto::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&index_)) + sizeof(target_));
}

PathNodeProto::~PathNodeProto() {
  // @@protoc_insertion_point(destructor:caffe2.PathNodeProto)
  SharedDtor();
}

void PathNodeProto::SharedDtor() {
}

void PathNodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathNodeProto::descriptor() {
  ::protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathNodeProto& PathNodeProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_caffe2_2fproto_2fhsm_2eproto::scc_info_PathNodeProto.base);
  return *internal_default_instance();
}


void PathNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PathNodeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_) -
        reinterpret_cast<char*>(&index_)) + sizeof(target_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathNodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PathNodeProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PathNodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PathNodeProto)
  return false;
#undef DO_
}

void PathNodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PathNodeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional int32 target = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PathNodeProto)
}

::google::protobuf::uint8* PathNodeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PathNodeProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional int32 target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PathNodeProto)
  return target;
}

size_t PathNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PathNodeProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathNodeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PathNodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PathNodeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathNodeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PathNodeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PathNodeProto)
    MergeFrom(*source);
  }
}

void PathNodeProto::MergeFrom(const PathNodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PathNodeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_ = from.target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathNodeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PathNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathNodeProto::CopyFrom(const PathNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PathNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathNodeProto::IsInitialized() const {
  return true;
}

void PathNodeProto::Swap(PathNodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathNodeProto::InternalSwap(PathNodeProto* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(length_, other->length_);
  swap(target_, other->target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathNodeProto::GetMetadata() const {
  protobuf_caffe2_2fproto_2fhsm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fhsm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe2
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::caffe2::NodeProto* Arena::CreateMaybeMessage< ::caffe2::NodeProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::NodeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::caffe2::TreeProto* Arena::CreateMaybeMessage< ::caffe2::TreeProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::TreeProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::caffe2::HierarchyProto* Arena::CreateMaybeMessage< ::caffe2::HierarchyProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::HierarchyProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::caffe2::PathProto* Arena::CreateMaybeMessage< ::caffe2::PathProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::PathProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::caffe2::PathNodeProto* Arena::CreateMaybeMessage< ::caffe2::PathNodeProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::PathNodeProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
